import os, sys
sys.path.append(r'/caffe/python')

import numpy as np
import lmdb
import h5py as h5
from dataLayer import DataLoader, getTransformer
import re
import operator
def createHDF5(state = 'train', leftSize = 20000, batchSize = 1000):
	h5path = '/caffe/examples/tes/data/%s/' % state

	dataloader = DataLoader({'state':'%s' % state})

	i = 0
	while leftSize > 0:
		i += 1
		if leftSize > batchSize:
			leftSize -= batchSize
		else:
			batchSize = leftSize
			leftSize = 0

		h5_filename = ('%s_{}.h5'.format(i)) % state
		h5_filename = os.path.join(h5path,h5_filename)

		with h5.File(h5_filename, 'w') as h:
			print h5_filename
			shoplist = []
			customlist = []
			labellist = []
			for x in range(batchSize):
				img_shop, img_custom, sim, label_shop, label_custom = dataloader.load_data(state)
				shoplist.append(img_shop)
				customlist.append(img_custom)

			shoplist = np.array(shoplist)
			customlist = np.array(customlist)

			h.create_dataset('img_shop', data = shoplist)
			h.create_dataset('img_cumstom', data = customlist)

		h5txt = os.path.join(h5path,'h5.txt')
		with open(h5txt, 'a') as f:
			f.write(h5_filename +'\n')

def createNagative(state = 'train', num =1):
	dataset = 'custom'
	rootPath = r'/dataset/DeepFashion/DeepFashion-Consumer-to-shop/'
	size = 1000
	h5path = '/caffe/examples/tes/data/negative/'
	dataloader = DataLoader({'state':'%s' % state})
	iterator = dataloader.getFileIter(state)
	meanValue = np.array([104,117,123], dtype = np.uint8)[:, np.newaxis, np.newaxis]

	imgList = []
	idList = []
	index = 0
	if dataset == 'shop':
		index = 1

	for i in xrange(num):
		h5_filename = os.path.join(h5path,'%s_%s_%s.h5' % (state,dataset,i))
		print h5_filename
		with h5.File(h5_filename, 'w') as h:
			while len(imgList) < size:
				line = iterator.next()
				data = line.split()

				id = data[index].split('/')[3]

				if id in idList:
					continue

				file = os.path.join(rootPath,'a',data[index])
				img = dataloader.load_image(file)
				imgList.append(img)
				idList.append(id)

			h.create_dataset('data', data = np.array(imgList))
			h.create_dataset('id', data = np.array(idList))




if __name__ == '__main__':
	# createNagative(state = 'test', num =1)
	# createHDF5(state = 'train', leftSize = 100000, batchSize = 1000)
	result = [0.71938813, 0.83035719, 0.73716128, 0.56405765, 0.81118953, 0.4112691, 0.73594487, 0.74268949, 0.72648478, 0.44145301, 0.0011622139, 0.45736557, 0.73312807, 0.55600774, 0.027175125, 0.64791185, 0.20429152, 0.71184236, 0.67556065, 0.52212906, 0.70148373, 0.64913398, 0.71190447, 0.84901667, 0.73380983, 0.759045, 0.5328387, 0.65615529, 0.73571879, 0.68391466, 0.1149048, 0.64541328, 0.53754956, 0.71186572, 0.61766905, 0.7036652, 0.62767321, 0.27017626, 0.45580482, 0.71901447, 0.6624524, 0.74976081, 0.67035973, 0.77384335, 0.71818006, 0.84431982, 0.91973442, 0.77746719, 0.55751359, 0.78526962, 0.53025228, 0.11395008, 0.51395828, 0.75036258, 0.45783862, 0.23138261, 0.65955323, 0.0026517967, 0.32520008, 0.39370722, 0.56759042, 0.18092336, 0.72928983, 0.86342621, 0.81117797, 0.67185199, 0.73915988, 0.48110485, 0.74431163, 0.68043071, 0.71663058, 0.56477702, 0.34419164, 0.2254034, 0.046908021, 0.6776697, 0.5481689, 0.72778541, 0.53785914, 0.50985885, 0.58982956, 0.76827514, 0.69328004, 0.74402726, 0.76825571, 0.85677564, 0.81538457, 0.67756975, 0.6236313, 0.65394312, 0.45176676, 0.054568097, 0.73429602, 0.68339652, 0.23648985, 0.44199267, 0.81597346, 0.37574646, 0.42589229, 0.61814839, 0.73502755, 0.77134734, 0.78396386, 0.80588865, 0.81726301, 0.73763096, 0.47301909, 0.82974541, 0.52935565, 0.88385701, 0.71683127, 0.004463451, 0.554313, 0.82946891, 0.50334412, 0.0062714294, 0.0022980343, 0.12321147, 0.56186807, 0.61758101, 0.90973115, 0.65210277, 0.69288015, 0.75382197, 0.7510981, 0.77060139, 0.75302577, 0.73890209, 0.77750945, 0.74290186, 0.41457379, 0.51668614, 0.47092903, 0.65226698, 0.47938183, 0.78582722, 0.43163705, 0.46137363, 0.0018131635, 0.31934521, 0.65606755, 0.76710272, 0.72277439, 0.82746023, 0.68830067, 0.54515433, 0.67832649, 0.80936825, 0.82127333, 0.50789905, 0.55960768, 0.33461487, 0.047400739, 0.40198773, 0.36267668, 0.0050107096, 0.55424803, 0.50757307, 0.088260971, 0.093638964, 0.72569352, 0.78657967, 0.80431855, 0.69886893, 0.79026705, 0.51558524, 0.7128185, 0.50674057, 0.81013274, 0.83275002, 0.62714064, 0.66122395, 0.46045798, 0.0046567055, 0.55076021, 0.60243851, 0.31789929, 0.35312781, 0.48205426, 0.58833498, 0.79116201, 0.67375892, 0.78667593, 0.74141473, 0.32174873, 0.7875886, 0.54806811, 0.75532037, 0.76465863, 0.64134538, 0.7845481, 0.13787208, 0.7365883, 0.30289036, 0.19649501, 0.00011984906, 0.56395572, 0.42929426, 0.36745611, 0.77849174, 0.75582087, 0.38419855, 0.58592242, 0.59362346, 0.69201624, 0.48862982, 0.46164855, 0.56241137, 0.75642085, 0.73512149, 0.010281007, 0.0034061763, 0.73362321, 0.40394911, 0.77517217, 0.58444875, 0.71871108, 0.00061837764, 0.41408727, 0.42589796, 0.72001439, 0.71139008, 0.66228974, 0.68908519, 0.73047012, 0.68541068, 0.77360445, 0.71889108, 0.64031881, 0.47806606, 0.375806, 0.48270985, 0.34794736, 0.06309934, 0.23893179, 0.42588022, 0.44464543, 0.28095043, 0.49955049, 0.53643501, 0.73145431, 0.78218651, 0.75537306, 0.73907334, 0.48240474, 0.73575246, 0.74363595, 0.53550452, 0.6101144, 0.74176389, 0.4168967, 0.67241067, 0.0073724664, 0.55897343, 0.039663352, 0.55477768, 0.3553507, 0.41326573, 0.5570479, 0.028689425, 0.73468548, 0.76618999, 0.61722565, 0.48194858, 0.75291461, 0.75449377, 0.50967848, 0.81331444, 0.72799504, 0.54996485, 0.41624019, 0.46066117, 0.48545754, 0.44801864, 0.5383541, 0.37625691, 0.61647201, 0.63848758, 0.29436222, 0.53650618, 0.6224004, 0.67963839, 0.62430471, 0.41233271, 0.80135882, 0.67752194, 0.72237527, 0.77090818, 0.7874946, 0.43528956, 0.018374437, 0.40831003, 0.016076688, 0.46292895, 0.47398993, 0.29842046, 0.75231391, 0.73355222, 0.7467469, 0.034037691, 0.77808064, 0.17195767, 0.7070232, 0.73754746, 0.53321528, 0.74268562, 0.8128857, 0.84598953, 0.4984802, 0.76636821, 0.30563086, 0.10340542, 0.66471285, 0.59243709, 0.60407358, 0.11840007, 0.0018756775, 0.62012488, 0.16060247, 0.74804807, 0.72500402, 0.28533721, 0.6612255, 0.72904289, 0.83278316, 0.73712683, 0.82487011, 0.72267002, 0.75886518, 0.80632859, 0.48076367, 0.53820372, 0.0094467122, 0.71598917, 0.40904322, 0.29525957, 0.01226023, 0.14663033, 0.002217009, 0.2460023, 0.69887727, 0.51237994, 0.72338748, 0.75757951, 0.84325469, 0.46236497, 0.35463881, 0.79968101, 0.67342889, 0.67027485, 0.12479932, 0.68997431, 0.59885561, 0.58970022, 0.82145369, 0.43553329, 0.3944988, 0.77559012, 0.00072987808, 0.70946223, 0.74886066, 0.72868496, 0.69327086, 0.64464152, 0.71675998, 0.78886139, 0.60582894, 0.75799072, 0.71451908, 0.79547966, 0.71637368, 0.82621783, 0.41873261, 0.24229223, 0.573183, 0.69983464, 0.27625, 0.75058603, 0.56478119, 0.50433838, 0.67229706, 0.66014922, 0.56015635, 0.71357417, 0.71327752, 0.72937876, 0.69447839, 0.87512714, 0.74612367, 0.78440285, 0.0070822979, 0.33975476, 0.00048100852, 0.49519798, 0.55138576, 0.054203607, 0.095172323, 0.52516103, 0.5609771, 0.58482754, 0.71609432, 0.72947013, 0.68551147, 0.65037322, 0.47914734, 0.73797864, 0.5478276, 0.85346198, 0.6359697, 0.78382045, 0.078562304, 0.12358413, 0.51283419, 0.74433947, 0.29511946, 0.0016341638, 0.0018928968, 0.72795254, 0.59791654, 0.30752504, 0.5467118, 0.80138731, 0.78727078, 0.80365044, 0.74635303, 0.75378478, 0.68316346, 0.77870405, 0.77734756, 0.304086, 0.1935913, 0.59011966, 0.29004717, 0.32695925, 0.55510849, 0.44078597, 0.19582315, 0.00043550745, 0.45025113, 0.46314356, 0.71164936, 0.53623319, 0.77393359, 0.79090583, 0.61540401, 0.40146032, 0.70410752, 0.65195018, 0.79797852, 0.72081894, 0.74862754, 0.31380111, 0.0016014749, 0.28996247, 0.15594271, 0.50252813, 0.21202539, 0.4508352, 0.65214819, 0.50863147, 0.63722527, 0.61576539, 0.62665141, 0.75410342, 0.63387924, 0.75451988, 0.77163547, 0.65267169, 0.57704949, 0.7880972, 0.40993807, 0.54348886, 0.43379542, 0.22097836, 0.0098613827, 0.47611392, 0.54071385, 0.21348339, 0.45569041, 0.776393, 0.73108882, 0.40197229, 0.80135274, 0.62843883, 0.70550632, 0.71529305, 0.62761611, 0.67012602, 0.74189603, 0.77499443, 0.74813175, 0.54456091, 0.54352045, 0.71358114, 0.13347118, 0.57862759, 0.002900986, 0.56873178, 0.0011645766, 0.42462435]
	labels = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  
	threchList = []
	accList = []
	p_acc = []
	n_acc = []

	for threch in np.arange(0.3, 0.8001, 0.001):
		tp_p = 0
		tp_n = 0
		# threch = float(threch)/100
		for i in xrange(len(result)):
			if labels[i] == 1 and result[i] > threch:
			    tp_p += 1

			elif labels[i] == 0 and result[i] < threch:
			    tp_n += 1

		print tp_p, tp_n
		# print len(result)
		acc = float(tp_p + tp_n )/len(result)
		print 'threch = %.4f, acc = %.4f' % (threch, acc)
		print float(tp_p)/(len(result)/2), float(tp_n)/(len(result)/2)

		threchList.append(threch)
		accList.append(acc)
		p_acc.append(float(tp_p)/(len(result)/2))
		n_acc.append(float(tp_n)/(len(result)/2))

	n_result = []
	p_result = []	
	for i in xrange(len(result)):
		if labels[i] == 1:
		    p_result.append(result[i])
		elif labels[i] == 0:
		    n_result.append(result[i])

	analy = zip(threchList,accList)
	analy.sort(key=operator.itemgetter(1), reverse=True)
	print analy[0]

	# print p_result

	p_result = np.around(p_result, 2)
	n_result = np.around(n_result, 2)
	xp = np.zeros(101, dtype = np.int8)
	xn = np.zeros(101, dtype = np.int8)
	for result in p_result:
		index = result*100
		xp[index] += 1

	for result in n_result:
		index = result*100
		xn[index] += 1

	print sum(xp[60:])
	print xn

	import matplotlib.pyplot as plt
	plt.figure()

	plt.bar(np.arange(0,1.01, 0.01),  xp, width = 0.01,color='green')
	plt.bar(np.arange(0,1.01, 0.01), xn, width = 0.012, color='blue')

	# plt.plot(threchList,accList, label="total")
	# plt.plot(threchList,p_acc, label="positive")
	# plt.plot(threchList,n_acc, label="negative")
	# plt.xlabel('threshold')
	# plt.ylabel('accuracy')
	# plt.xlim(0.3,0.8)
	# plt.ylim(0,1.0)
	# plt.legend()
	plt.show()

